#!/bin/sh

# Copyright (c) 2023 The PaSh Authors. 
#
# Usage of this source code is governed by the MIT license, you can find the
# LICENSE file in the root directory of this project.
#
# https://github.com/binpash/try

TRY_VERSION="0.1.0"

# exit status invariants
#
# 0 -- command ran
# 1 -- consistency error/failure
# 2 -- input error

################################################################################
# Run a command in an overlay
################################################################################

try() {
    START_DIR="$PWD"

    [ "$SANDBOX_DIR" ] || SANDBOX_DIR=$(mktemp -d)
    export SANDBOX_DIR
    mkdir -p "$SANDBOX_DIR/upperdir" "$SANDBOX_DIR/workdir" "$SANDBOX_DIR/temproot"

    # we will overlay-mount each root directory separately (instead of all at once) because some directories cannot be overlayed
    # so we set up the mount points now
    for top_dir in /*
    do
        ## Only make the directory if the original is a directory too
        if [ -d "$top_dir" ]; then
            mkdir "$SANDBOX_DIR"/upperdir/"$top_dir" "$SANDBOX_DIR"/workdir"/$top_dir" "$SANDBOX_DIR"/temproot/"$top_dir"
        fi
    done

    mount_and_execute=$(mktemp)
    export chroot_executable=$(mktemp)
    export try_mount_log=$(mktemp)
    export script_to_execute=$(mktemp)
    cat >"$mount_and_execute" <<"EOF"
#!/bin/sh

# actually mount the overlays
for top_dir in /*
do
    ## If the directory is not a mountpoint
    if [ -d "$top_dir" ] && ! mountpoint -q "$top_dir"; then
        ## TODO: The 
        mount -t overlay overlay -o lowerdir=/"$top_dir",upperdir="$SANDBOX_DIR"/upperdir/"$top_dir",workdir="$SANDBOX_DIR"/workdir/"$top_dir" "$SANDBOX_DIR"/temproot/"$top_dir" 2>> "$try_mount_log" || echo "Warning: Failed mounting $top_dir as an overlay, see "$try_mount_log"" 1>&2
    fi
done

# Now we will handle custom mounts, e.g., mounts on /home
# findmnt
# --real: only list real filesystems
# -n: no header
# -r: raw output
# -o target: only print the mount target
# then we want to exclude the root partition "/"
for mount_dir in $(findmnt --real -r -o target -n | grep -v "^/$")
do
    mount -t overlay overlay -o lowerdir="$mount_dir",upperdir="$SANDBOX_DIR"/upperdir"$mount_dir",workdir="$SANDBOX_DIR"/workdir"$mount_dir" "$SANDBOX_DIR"/temproot"$mount_dir" 2>> "$try_mount_log" || echo "Warning: Failed mounting $mount_dir as an overlay, see "$try_mount_log"" 1>&2
done

## Bind the udev mount so that the containerized process has access to /dev
## KK 2023-05-06 Are there any security/safety implications by binding the whole /dev?
##               Maybe we just want to bind a few files in it like /dev/null, /dev/zero?
mount --rbind /dev "$SANDBOX_DIR/temproot/dev"
## KK 2023-06-20 Redirecting to /dev/null to suppress a yet uninvestigated but
##               seemingly not impactful warning.
mount --rbind --read-only /run "$SANDBOX_DIR/temproot/run" 2> /dev/null

## Check if chroot_executable exists, #29
if ! [ -f "$SANDBOX_DIR/temproot/$chroot_executable" ]; then
    cp $chroot_executable "$SANDBOX_DIR/temproot/$chroot_executable"
fi


unshare --root="$SANDBOX_DIR/temproot" /bin/bash "$chroot_executable"
EOF

    cat >"$chroot_executable" <<EOF
#!/bin/sh
                              
mount -t proc proc /proc &&   
cd $START_DIR && 
source "$script_to_execute"
EOF

    echo "$@" >"$script_to_execute"

    chmod +x "$mount_and_execute" "$chroot_executable"

    # enable job control so interactive commands will play nicely with try asking for user input later(for committing). #5
    set -m

    # --mount: mounting and unmounting filesystems will not affect the rest of the system outside the unshare
    # --map-root-user: map to the superuser UID and GID in the newly created user namespace.
    # --user: the process will have a distinct set of UIDs, GIDs and capabilities.
    # --pid: create a new process namespace (needed fr procfs to work right)
    # --fork: necessary if we do --pid
    #         "Creation of a persistent PID namespace will fail if the --fork option is not also specified."
    unshare --mount --map-root-user --user --pid --fork "$mount_and_execute"
    exitcode=$?

    ################################################################################
    # commit?

    case "$NO_COMMIT" in
        (quiet) ;;
        (show) printf "%s\n" "$SANDBOX_DIR";;
        (commit) commit "$SANDBOX_DIR";;
        (interactive)
            summary "$SANDBOX_DIR" >&2
        if [ "$?" -eq 0 ]
        then
            echo
            read -p "Commit these changes? [y/N] " DO_COMMIT >&2
            case "$DO_COMMIT" in
                (y|Y|yes|YES) commit "$SANDBOX_DIR";;
                (*) printf "Not committing.\n" >&2
                echo "$SANDBOX_DIR";;
            esac
        fi
        ;;
    esac
}

################################################################################
# Summarize an overlay
################################################################################

summary() {
    if ! [ -d "$SANDBOX_DIR" ]
    then
        printf "%s: could not find directory $SANDBOX_DIR\n" "$(basename $0)" >&2
        exit 2
    elif ! [ -d "$SANDBOX_DIR/upperdir" ]
    then
        printf "%s: could not find directory $SANDBOX_DIR\n" "$(basename $0)" >&2
        exit 1
    fi
    
    ## Finds all potential changes
    changed_files=$(find_upperdir_changes "$SANDBOX_DIR")
    summary_output=$(process_changes "$SANDBOX_DIR" "$changed_files")
    
    if [ -z "$summary_output" ];
    then
        return 1
    fi

    echo
    echo "Changes detected in the following files:"
    echo

    while IFS= read -r summary_line; do
        local_file="$(echo "$summary_line" | cut -c 4- )"
        case "$summary_line" in
        (rd*) echo "$local_file (replaced with dir)";;
        (md*) echo "$local_file (created dir)";;
        (de*) echo "$local_file (deleted)";;
        (mo*) echo "$local_file (modified)";;
        (ad*) echo "$local_file (added)"
        esac
    done <<EOF
$summary_output
EOF

    return 0
}

################################################################################
# Commit the results of an overlay
################################################################################

commit() {
    changed_files=$(find_upperdir_changes "$SANDBOX_DIR")
    summary_output=$(process_changes "$SANDBOX_DIR" "$changed_files")

    while IFS= read -r summary_line; do
        local_file="$(echo "$summary_line" | cut -c 4-)"
        changed_file="$SANDBOX_DIR/upperdir$local_file"
        case $summary_line in
        (rd*) rm -f "$local_file"; mkdir "$local_file";;
        (md*) mkdir "$local_file";;
        (de*) rm "$local_file";;
        (mo*) cp -fa "$changed_file" "$local_file";;
        (ad*) cp -fa "$changed_file" "$local_file"
        esac
    
        if [ $? -ne 0 ]
        then
        # TODO collect errors and summarize later
            printf "couldn't commit $changed_file\n"
            exit 1
        fi
    done <<EOF
$summary_output
EOF
}

## Checks if a file is an overlayfs whiteout file
is_whiteout_file() {
    file="$1"
    [ -c "$file" ] && ! [ -s "$file" ] && [ "$(stat -c %t,%T "$file")" = "0,0" ]
}

## Defines which changes we want to ignore in the summary and commit
## TODO: Make this be parametrizable, through a file for example
ignore_changes() {
    grep -v -e .rkr -e Rikerfile
}

## Lists all upperdir changes in raw format
find_upperdir_changes() {
    sandbox_dir="$1"
    find "$sandbox_dir/upperdir/" -type f -o \( -type c -size 0 \) -o -type d | ignore_changes
}

## Processes upperdir changes to an internal format that can be processed by summary and commit
## Format:
## XX PATH
## where:
##  XX is a two character code for the modification
##  - rd: Replaced with a directory
##  - md: Created a directory
##  - de: Deleted a file
##  - mo: Modified a file
##  - ad: Added a file
##  PATH is the local path
process_changes() {
    sandbox_dir="$1"
    changed_files="$2"
    while IFS= read -r changed_file; do
        local_file="${changed_file#$sandbox_dir/upperdir}"
        if [ -d "$changed_file" ] && ! [ -d "${local_file}" ]
        then # new directory
            ## If something exists there, we need to delete it first
            if [ -e "$local_file" ]
            then
                echo "rd $local_file" 
            else
                echo "md $local_file"
            fi
        elif is_whiteout_file "$changed_file"
        then # whiteout file
            echo "de $local_file"
        elif [ -f "$changed_file" ]
        then # normal file
            if [ -e "$local_file" ]
            then
                echo "mo $local_file"
            else
                echo "ad $local_file"
            fi
        fi
    done <<EOF
$changed_files
EOF
}


################################################################################
# Argument parsing
################################################################################

usage() {
    cmd="$(basename $0)"
    cat >&2 <<EOF
Usage: $cmd [-nvhy] [-D DIR] CMD [ARG ...]

  -n                don't prompt for commit
  -y                assume yes to all prompts (implies -n is not used)
  -D DIR            work in DIR (implies -n)
  
  -v                show version information (and exit)
  -h                show this usage message (and exit)


Subcommands:
  $cmd summary DIR   show the summary for the overlay in DIR
  $cmd commit DIR    commit the overlay in DIR
  $cmd explore DIR   start a shell inside the overlay in DIR
EOF
}

# "interactive" - show nothing, interactively prompt on commit
# "show"        - show the resulting directory on stdout when we're done
# "quiet"       - do not show the result directory on stdout when we're done
# "commit"      - commit the result directory automatically when we're done
NO_COMMIT="interactive"

while getopts ":yvnD:" opt
do
    case "$opt" in
        (y) NO_COMMIT="commit";;
        (n) NO_COMMIT="show";;
        (D) if ! [ -d "$OPTARG" ]
            then
                printf "%s: no such directory $OPTARG\n" "$(basename $0)" >&2
                exit 2
            fi
            SANDBOX_DIR="$OPTARG"
            NO_COMMIT="quiet"
            ;;
        (v) printf "%s version $TRY_VERSION\n" "$(basename $0)" >&2; exit 0;;
        (h|*) usage; exit 0;;
    esac
done

shift $(($OPTIND - 1))

if [ "$#" -eq 0 ]
then
    usage
    exit 2
fi

case "$1" in
    (summary) : ${SANDBOX_DIR=$2}; summary;;
    (commit) : ${SANDBOX_DIR=$2}; commit;;
    (explore) : ${SANDBOX_DIR=$2}; try bash;;
    (--) shift; try "$@";;
    (*) try "$@";;
esac

exit $exitcode
