#!/bin/sh

# Copyright (c) 2023 The PaSh Authors. 
#
# Usage of this source code is governed by the MIT license, you can find the
# LICENSE file in the root directory of this project.
#
# https://github.com/binpash/try

TRY_VERSION="0.1.0"

# exit status invariants
#
# 0 -- command ran
# 1 -- consistency error/failure
# 2 -- input error

################################################################################
# Run a command in an overlay
################################################################################

try() {
    START_DIR="$PWD"

    [ "$SANDBOX_DIR" ] || SANDBOX_DIR=$(mktemp -d)
    export SANDBOX_DIR
    mkdir -p "$SANDBOX_DIR/upperdir" "$SANDBOX_DIR/workdir" "$SANDBOX_DIR/temproot"

    # we will overlay-mount each root directory separately (instead of all at once) because some directories cannot be overlayed
    # so we set up the mount points now
    #
    # findmnt
    # --real: only list real filesystems
    # -n: no header
    # -r: raw output
    # -o target: only print the mount target
    # then we want to exclude the root partition "/"
    for mointpoint in /* $(findmnt --real -r -o target -n | grep -v "^/$")
    do
        ## Only make the directory if the original is a directory too
        if [ -d "$mointpoint" ]; then
            mkdir -p "$SANDBOX_DIR"/upperdir/"$mointpoint" "$SANDBOX_DIR"/workdir"/$mointpoint" "$SANDBOX_DIR"/temproot/"$mointpoint"
        fi
    done

    mount_and_execute=$(mktemp)
    export chroot_executable=$(mktemp)
    export try_mount_log=$(mktemp)
    cat >"$mount_and_execute" <<"EOF"
#!/bin/sh

# actually mount the overlays
for mointpoint in /* $(findmnt --real -r -o target -n | grep -v "^/$")
do
    ## If the directory is not a mountpoint
    if [ -d "$mointpoint" ]; then 
        # skip if it is /dev or /proc, we will mount it later
        if [ "$mointpoint" = "/dev" ] || [ "$mointpoint" = "/proc" ]; then
            continue
        fi
        # Try mounting everything normally
        mount -t overlay overlay -o lowerdir=/"$mointpoint",upperdir="$SANDBOX_DIR"/upperdir/"$mointpoint",workdir="$SANDBOX_DIR"/workdir/"$mointpoint" "$SANDBOX_DIR"/temproot/"$mointpoint" 2>> "$try_mount_log"
        # If mounting everything normally fails, we try using either using mergerfs or unionfs to mount them.
        if [ $? -ne 0 ]; then
            # Detect if union_helper is set, if not, we try to autodetect them
            if [ -z ${union_helper+x} ]; then
                if command -v mergerfs > /dev/null; then
                    union_helper=mergerfs
                elif command -v unionfs > /dev/null; then
                    union_helper=unionfs
                else
                    echo "Error: Failed to mount overlayfs normally, mergerfs or unionfs not found for $mointpoint, see $try_mount_log" 1>&2
                    exit 1
                fi
            fi

            # Here we use mergerfs/unionfs to be mounted into a single file system. Used to fix nested mounts #19
            merger_dir=$(mktemp -d)
            "$union_helper" $mointpoint $merger_dir 2>> "$try_mount_log" || echo "Warning: Failed to mount $mointpoint via $union_helper, see $try_mount_log" 1>&2 &&
            mount -t overlay overlay -o lowerdir="$merger_dir",upperdir="$SANDBOX_DIR"/upperdir"$mointpoint",workdir="$SANDBOX_DIR"/workdir"$mointpoint" "$SANDBOX_DIR"/temproot"$mointpoint" 2>> "$try_mount_log" ||
            echo "Warning: Failed mounting $mointpoint as an overlay via $union_helper, see "$try_mount_log"" 1>&2
        fi
    fi
done

for dev in tty null zero full random urandom
do
    touch "$SANDBOX_DIR/temproot/dev/$dev"
    mount -o bind /dev/$dev "$SANDBOX_DIR/temproot/dev/$dev"
done

## Check if chroot_executable exists, #29
if ! [ -f "$SANDBOX_DIR/temproot/$chroot_executable" ]; then
    cp $chroot_executable "$SANDBOX_DIR/temproot/$chroot_executable"
fi

unshare --root="$SANDBOX_DIR/temproot" /bin/bash "$chroot_executable"
EOF

    cat >"$chroot_executable" <<EOF
#!/bin/sh

mount -t proc proc /proc &&   
cd $START_DIR && 
exec $@
EOF

    chmod +x "$mount_and_execute" "$chroot_executable"

    # --mount: mounting and unmounting filesystems will not affect the rest of the system outside the unshare
    # --map-root-user: map to the superuser UID and GID in the newly created user namespace.
    # --user: the process will have a distinct set of UIDs, GIDs and capabilities.
    # --pid: create a new process namespace (needed fr procfs to work right)
    # --fork: necessary if we do --pid
    #         "Creation of a persistent PID namespace will fail if the --fork option is not also specified."
    unshare --mount --map-root-user --user --pid --fork "$mount_and_execute"
    exitcode=$?

    ################################################################################
    # commit?

    case "$NO_COMMIT" in
        (quiet) ;;
        (show) printf "%s\n" "$SANDBOX_DIR";;
        (commit) commit "$SANDBOX_DIR";;
        (interactive)
            summary "$SANDBOX_DIR" >&2
        if [ "$?" -eq 0 ]
        then
            echo
            read -p "Commit these changes? [y/N] " DO_COMMIT >&2
            case "$DO_COMMIT" in
                (y|Y|yes|YES) commit "$SANDBOX_DIR";;
                (*) printf "Not commiting.\n" >&2
                echo "$SANDBOX_DIR";;
            esac
        fi
        ;;
    esac
}

################################################################################
# Summarize an overlay
################################################################################

summary() {
    if ! [ -d "$SANDBOX_DIR" ]
    then
        printf "%s: could not find directory $SANDBOX_DIR\n" "$(basename $)" >&2
        exit 2
    elif ! [ -d "$SANDBOX_DIR/upperdir" ]
    then
        printf "%s: could not find directory $SANDBOX_DIR\n" "$(basename $0)" >&2
        exit 1
    fi
    
    # We don't include directories here (like in commit) since that would be too verbose for the summary.
    changed_files=$(find "$SANDBOX_DIR/upperdir/" -type f -or \( -type c -size 0 \) | ignore_changes)

    if [ -z "$changed_files" ];
    then
        return 1
    fi

    echo
    echo "Changes detected in the following files:"
    echo
    while IFS= read -r changed_file; do
        local_file="${changed_file#$SANDBOX_DIR/upperdir}"
        ## KK 2023-06-20 Could print local_file instead of changed file for
        ##               cleaner output.
        if [ -d "$changed_file" ] && ! [ -d "${local_file}" ]
        then # new directory
            ## KK 2023-06-20 This is not reachable since the `type -d` option is not given to find above.
            echo "$changed_file (created)"
        elif [ -c "$changed_file" ] && ! [ -s "$changed_file" ]
        then # whiteout file
            echo "$changed_file (deleted)"
        elif [ -f "$changed_file" ]
        then # normal file
            echo "$changed_file (modified/added)"
        fi
    done <<EOF
$changed_files
EOF
    return 0
}

################################################################################
# Commit the results of an overlay
################################################################################

commit() {
    # This is different from the one in summary because it also includes all directories.
    # TODO: Could be made more efficient by only appending directories to the already computed
    #       changed_files from summary.
    changed_files=$(find "$SANDBOX_DIR/upperdir/" -type f -o \( -type c -size 0 \) -o -type d | ignore_changes)

    while IFS= read -r changed_file; do
        local_file="${changed_file#$SANDBOX_DIR/upperdir}"
        if [ -d "$changed_file" ] && ! [ -d "${local_file}" ]
        then # new directory
            mkdir "${local_file}"
        elif [ -c "$changed_file" ] && ! [ -s "$changed_file" ]
        then # whiteout file
            rm "${local_file}"
        elif [ -f "$changed_file" ]
        then # normal file
            # -f to commit the file if the target file is readonly, and -a to preserve permissions
            cp -fa "$changed_file" "${local_file}"
        fi
    
        if [ $? -ne 0 ]
        then
        # TODO collect errors and summarize later
            printf "couldn't commit $changed_file\n"
            exit 1
        fi
    done <<EOF
$changed_files
EOF
}


## Defines which changes we want to ignore in the summary and commit
## TODO: Make this be parametrizable, through a file for example
ignore_changes() {
    grep -v -e .rkr -e Rikerfile
}


################################################################################
# Argument parsing
################################################################################

usage() {
    cmd="$(basename $0)"
    cat >&2 <<EOF
Usage: $cmd [-nvhy] [-D DIR] [-U PATH] CMD [ARG ...]

  -n                don't prompt for commit
  -y                assume yes to all prompts (implies -n is not used)
  -D DIR            work in DIR (implies -n)
  -U PATH           path to unionfs helper (e.g., mergerfs, unionfs-fuse)
  
  -v                show version information (and exit)
  -h                show this usage message (and exit)


Subcommands:
  $cmd summary DIR   show the summary for the overlay in DIR
  $cmd commit DIR    commit the overlay in DIR
  $cmd explore DIR   start a shell inside the overlay in DIR
EOF
}

# "interactive" - show nothing, interactively prompt on commit
# "show"        - show the resulting directory on stdout when we're done
# "quiet"       - do not show the result directory on stdout when we're done
# "commit"      - commit the result directory automatically when we're done
NO_COMMIT="interactive"

while getopts ":yvnD:U:" opt
do
    case "$opt" in
        (y) NO_COMMIT="commit";;
        (n) NO_COMMIT="show";;
        (D) if ! [ -d "$OPTARG" ]
            then
                printf "%s: no such directory $OPTARG\n" "$(basename $0)" >&2
                exit 2
            fi
            SANDBOX_DIR="$OPTARG"
            NO_COMMIT="quiet"
            ;;
        (v) printf "%s version $TRY_VERSION\n" "$(basename $0)" >&2; exit 0;;
        (U) if ! [ -x "$OPTARG" ]
            then
                printf "%s: no such executable $OPTARG\n" "$(basename $0)" >&2
                exit 2
            fi
            union_helper="$OPTARG" 
            ;;
        (h|*) usage; exit 0;;
    esac
done

shift $(($OPTIND - 1))

if [ "$#" -eq 0 ]
then
    usage
    exit 2
fi

case "$1" in
    (summary) : ${SANDBOX_DIR=$2}; summary;;
    (commit) : ${SANDBOX_DIR=$2}; commit;;
    (explore) : ${SANDBOX_DIR=$2}; try bash;;
    (--) shift; try "$@";;
    (*) try "$@";;
esac

exit $exitcode
